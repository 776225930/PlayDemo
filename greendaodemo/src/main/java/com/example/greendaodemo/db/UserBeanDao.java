package com.example.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaodemo.model.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property AddFriendsKey = new Property(1, String.class, "addFriendsKey", false, "ADD_FRIENDS_KEY");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property HeadUrl = new Property(3, String.class, "headUrl", false, "HEAD_URL");
        public final static Property UserState = new Property(4, int.class, "userState", false, "USER_STATE");
        public final static Property AddDate = new Property(5, String.class, "addDate", false, "ADD_DATE");
        public final static Property CommunicationId = new Property(6, String.class, "communicationId", false, "COMMUNICATION_ID");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userId
                "\"ADD_FRIENDS_KEY\" TEXT," + // 1: addFriendsKey
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"HEAD_URL\" TEXT," + // 3: headUrl
                "\"USER_STATE\" INTEGER NOT NULL ," + // 4: userState
                "\"ADD_DATE\" TEXT," + // 5: addDate
                "\"COMMUNICATION_ID\" TEXT);"); // 6: communicationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String addFriendsKey = entity.getAddFriendsKey();
        if (addFriendsKey != null) {
            stmt.bindString(2, addFriendsKey);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
        stmt.bindLong(5, entity.getUserState());
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(6, addDate);
        }
 
        String communicationId = entity.getCommunicationId();
        if (communicationId != null) {
            stmt.bindString(7, communicationId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String addFriendsKey = entity.getAddFriendsKey();
        if (addFriendsKey != null) {
            stmt.bindString(2, addFriendsKey);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
        stmt.bindLong(5, entity.getUserState());
 
        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(6, addDate);
        }
 
        String communicationId = entity.getCommunicationId();
        if (communicationId != null) {
            stmt.bindString(7, communicationId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // addFriendsKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headUrl
            cursor.getInt(offset + 4), // userState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // addDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // communicationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddFriendsKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserState(cursor.getInt(offset + 4));
        entity.setAddDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommunicationId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
